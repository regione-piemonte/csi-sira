/*
 * Created on 8 nov 2016 ( Time 16:16:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package it.csi.sira.backend.metadata.integration.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;

import it.csi.sira.backend.metadata.integration.dto.SipraMtdTFunzione;
import it.csi.sira.backend.metadata.integration.dao.SipraMtdTFunzioneDAO;
import it.csi.sira.backend.metadata.utils.GenericDAO;
import org.springframework.jdbc.core.RowMapper;

/**
 * SipraMtdTFunzione DAO implementation 
 * 
 * @author Telosys Tools
 *
 */
public class SipraMtdTFunzioneDAOImpl extends GenericDAO<SipraMtdTFunzione> implements SipraMtdTFunzioneDAO {
	//----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public SipraMtdTFunzioneDAOImpl() {
		super();
	}

	private final static String QUERY_PRIMARY_KEY = 
		"select * from sipra_mtd_t_funzione where id_funzione = :id_funzione";
	
	private final static String QUERY_INSERT = 
		"insert into sipra_mtd_t_funzione(id_funzione,fk_tipo_funzione,fk_metadato,request_url) values(:id_funzione,:fk_tipo_funzione,:fk_metadato,:request_url)";

	private final static String QUERY_UPDATE = 
		"update sipra_mtd_t_funzione set fk_tipo_funzione = :fk_tipo_funzione, fk_metadato = :fk_metadato, request_url = :request_url  where id_funzione = :id_funzione";

	private final static String QUERY_DELETE = 
		"delete from sipra_mtd_t_funzione where  id_funzione = :id_funzione";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from sipra_mtd_t_funzione";
	
	@Override
	public String getPrimaryKeySelect() {
		return QUERY_PRIMARY_KEY;		
	}
	
	@Override
	public String getTableName(){
		return "sipra_mtd_t_funzione";
	}

	@Override
	public String getSqlSelect() {
		return "select * from sipra_mtd_t_funzione";
	}

	@Override
	public String getSqlInsert() {
		return QUERY_INSERT;
	}

	@Override
	public String getSqlUpdate() {
		return QUERY_UPDATE;
	}

	@Override
	public String getSqlDelete() {
		return QUERY_DELETE;
	}

	@Override
	public String getSqlCount() {
		return SQL_COUNT_ALL;
	}

	public SipraMtdTFunzione findByPK(Integer idFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_funzione", idFunzione);
		return super.findByPK(map);		
	}

	public int deleteByPK(Integer idFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_funzione", idFunzione);
		return super.delete(getSqlDelete(), map);		
	}

	@Override
	public java.util.Map<String, Object> getValuesForInsert(SipraMtdTFunzione sipraMtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_funzione", sipraMtdTFunzione.getIdFunzione());
		map.put("fk_tipo_funzione", sipraMtdTFunzione.getFkTipoFunzione());
		map.put("fk_metadato", sipraMtdTFunzione.getFkMetadato());
		map.put("request_url", sipraMtdTFunzione.getRequestUrl());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForUpdate(SipraMtdTFunzione sipraMtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("fk_tipo_funzione", sipraMtdTFunzione.getFkTipoFunzione());
		map.put("fk_metadato", sipraMtdTFunzione.getFkMetadato());
		map.put("request_url", sipraMtdTFunzione.getRequestUrl());
		map.put("id_funzione", sipraMtdTFunzione.getIdFunzione());
		return map;
	}

	public java.util.Map<String, Object> getValuesForPrimaryKey(SipraMtdTFunzione sipraMtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_funzione", sipraMtdTFunzione.getIdFunzione());
		return map;
	}

	@Override
	public java.util.Map<String, Object> getValuesForDelete(SipraMtdTFunzione sipraMtdTFunzione) {
		java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();
		map.put("id_funzione", sipraMtdTFunzione.getIdFunzione());
		return map;
	}

	@Override
	public RowMapper<SipraMtdTFunzione> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		//return new SipraMtdTFunzioneRowMapper( new SipraMtdTFunzione() ) ;

       return new SipraMtdTFunzioneRowMapper() ;
	}

	//----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param sipraMtdTFunzione
	 * @throws SQLException
	 */
	private static void populateBean(ResultSet rs, SipraMtdTFunzione sipraMtdTFunzione) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		sipraMtdTFunzione.setIdFunzione(rs.getInt("id_funzione")); // java.lang.Integer
		if ( rs.wasNull() ) { sipraMtdTFunzione.setIdFunzione(null); }; // not primitive number => keep null value if any
		sipraMtdTFunzione.setFkTipoFunzione(rs.getInt("fk_tipo_funzione")); // java.lang.Integer
		if ( rs.wasNull() ) { sipraMtdTFunzione.setFkTipoFunzione(null); }; // not primitive number => keep null value if any
		sipraMtdTFunzione.setFkMetadato(rs.getInt("fk_metadato")); // java.lang.Integer
		if ( rs.wasNull() ) { sipraMtdTFunzione.setFkMetadato(null); }; // not primitive number => keep null value if any
		sipraMtdTFunzione.setRequestUrl(rs.getString("request_url")); // java.lang.String
	}


	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	public static class SipraMtdTFunzioneRowMapper implements RowMapper<SipraMtdTFunzione> {
	
		public SipraMtdTFunzioneRowMapper() {
			
		}
		
		public SipraMtdTFunzione mapRow(ResultSet rs, int rowNum) throws SQLException {
			SipraMtdTFunzione bean = new SipraMtdTFunzione();
			populateBean(rs, bean);
			return bean;
		}
	}
}
