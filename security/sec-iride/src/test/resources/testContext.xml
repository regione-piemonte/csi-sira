<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <!--
      Configure FreeMarker:

       - preferred charset: template files are stored in to UTF-8
       - TemplateExceptionHandler to handler errors
       - TemplateLoader to handle the resolution of where the template files come from
    -->
    <bean id="templateConfiguration"
          class="freemarker.template.Configuration">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="templateExceptionHandler">
            <util:constant static-field="freemarker.template.TemplateExceptionHandler.RETHROW_HANDLER" />
        </property>
    </bean>
    <!--
      Unfortunately, even if it "seems" a property of freemarker.template.Configuration class, "templateLoader" it's not.
      Therefore we need to split in two the preparation of "templateConfiguration" bean,
      using MethodInvokingFactoryBean to explicitly call "setTemplateLoader" method.
    -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject">
            <ref local="templateConfiguration"/>
        </property>
        <property name="targetMethod">
            <value>setTemplateLoader</value>
        </property>
        <property name="arguments">
            <list>
                <bean class="freemarker.cache.ClassTemplateLoader">
                    <constructor-arg index="0" value="org.geoserver.security.iride.IrideSecurityProvider" />
                    <constructor-arg index="1" value="/iride/soap/request" />
                </bean>
            </list>
        </property>
    </bean>

    <!-- http://stackoverflow.com/questions/11324372/how-to-make-spring-inject-value-into-a-static-field -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.geoserver.security.iride.soap.request.iride.AbstractIrideSoapRequestTemplateCompilationTest.setNamespaceContext"/>
        <property name="arguments">
            <util:map map-class="java.util.HashMap"
                      key-type="java.lang.String"
                      value-type="java.lang.String">
                <entry key="xsi" value="http://www.w3.org/2001/XMLSchema-instance" />
                <entry key="xsd" value="http://www.w3.org/2001/XMLSchema" />
                <entry key="soapenv" value="http://schemas.xmlsoap.org/soap/envelope/" />
                <entry key="int" value="http://interfaces.policy.iride2.csi.it"/>
            </util:map>
       </property>
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.geoserver.security.iride.soap.request.iride.AbstractIrideSoapRequestTemplateCompilationTest.setTemplateExtension"/>
        <property name="arguments">
            <value>xml</value>
       </property>
    </bean>

    <bean id="application"
          class="it.csi.iride2.policy.entity.Application">
        <constructor-arg type="java.lang.String" value="DECSIRA" />
    </bean>

    <bean id="irideIdentity"
          class="org.geoserver.security.iride.identity.IrideIdentity"
          factory-method="parseIrideIdentity">
        <constructor-arg type="java.lang.String" value="AAAAAA00B77B000F/CSI PIEMONTE/DEMO 20/IPA/20160531113948/2/1IQssTaf4vNMa66qU52m7g==" />
    </bean>

    <bean id="role"
          class="it.csi.iride2.iridefed.entity.Role"
          factory-method="parseRole">
        <constructor-arg type="java.lang.String" value="PA_GEN_DECSIRA@REG_PMN" />
    </bean>

    <bean id="useCase"
          class="it.csi.iride2.policy.entity.UseCase">
        <constructor-arg type="it.csi.iride2.policy.entity.Application" ref="application" />
        <constructor-arg type="java.lang.String" value="UC001" />
    </bean>

    <util:map id="usernameAndPassword"
              map-class="java.util.HashMap"
              key-type="java.lang.String"
              value-type="java.lang.Object">
        <entry key="username" value="username" />
        <entry key="password" value="********" />
    </util:map>

    <util:map id="irideIdentityOnly"
              map-class="java.util.HashMap"
              key-type="java.lang.String"
              value-type="java.lang.Object">
        <entry key="irideIdentity" value-ref="irideIdentity" />
    </util:map>

    <util:map id="irideIdentityAndApplication"
              map-class="java.util.HashMap"
              key-type="java.lang.String"
              value-type="java.lang.Object">
        <entry key="irideIdentity" value-ref="irideIdentity" />
        <entry key="application" value-ref="application" />
    </util:map>

    <util:map id="irideIdentityAndRole"
              map-class="java.util.HashMap"
              key-type="java.lang.String"
              value-type="java.lang.Object">
        <entry key="irideIdentity" value-ref="irideIdentity" />
        <entry key="role" value-ref="role" />
    </util:map>

    <util:map id="irideIdentityAndUseCase"
              map-class="java.util.HashMap"
              key-type="java.lang.String"
              value-type="java.lang.Object">
        <entry key="irideIdentity" value-ref="irideIdentity" />
        <entry key="useCase" value-ref="useCase" />
    </util:map>

</beans>